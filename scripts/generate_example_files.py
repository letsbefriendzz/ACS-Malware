"""
FILE	: generate_example_files.py
AUTHOR	: Ryan Enns
PROJECT	: ACS A1
DESC	:
	This file outlines various functions that, in the end, create a new file and encrypted key
	for us to use for our rnsm-client and rnsm-server demonstration. It also contains a test
	function to ensure that it has been set up correctly.
	
	Importantly, it assumes the directory structure that can be found in the source of this
	document. It also progressively prints various statements with downtime between them to
	better demonstrate what is occuring in the program.
"""

from cryptography.fernet import Fernet
from server_rsa import *
from cryptography.hazmat.primitives.serialization import *
from time import sleep

encrypted_file_path = "../test_files/encrypted_file"
encrypted_key_path = "../test_files/encrypted_file_key"

def create_new_keymsg():
	# Generating a new Fernet key
	# Fernet is symmetrical encryption.
	symmetricKey = Fernet.generate_key()
	# Creating a fernet instance with it so we can encrypt and decrypt with it.
	fernet = Fernet(symmetricKey)
	
	# Our secret message is of highly important nature - it's crucial that nobody
	# else knows not to let their memes be dreams.
	enc = fernet.encrypt(b"Don't let your memes be dreams!")
	print("Top secret message that's being encrypted:")
	print("Don't let your memes be dreams!\n")
	sleep(4)
	print("Is being encrypted with the following key:")
	print(symmetricKey)
	print()
	sleep(4)
	print("\'Don't let yout memes be dreams\' is now:")
	print(enc)
	print()
	sleep(4)
	# Loads the server's public key, so we can encrypt the symmetric key with it
	public = load_public_rsa()
	# by making a call to the encode_msg function located in server_rsa.py, we can
	# encrypt the symmetrical key.	
	encr_symm_key = encode_msg( public, symmetricKey )
	
	print("The server's public RSA key is being used to further encode the aforementioned symmetric key!")
	print("It is now :")
	print(encr_symm_key)
	print()
	sleep(4)

	# enc is the encrypted message.
	
	# open or create encrypted_file
	# write string of enc to the file
	with open(encrypted_file_path, "wb") as f:
		f.write(enc)
		
	# open or create a file to store the file key
	# write the string of the key to the file.
	with open(encrypted_key_path, "wb") as f:
		f.write(encr_symm_key)
		
	print("At this point, the encrypted file contents and the encrypted symmetric key have been written to separate files for processing.")
	print(encrypted_file_path)
	print(encrypted_key_path)
	print()
	sleep(4)
		
def test_keymsg():
	print("We are now in a function used to test the keymsg pair.")
	sleep(4)
	private = load_private_rsa()
	with open(encrypted_key_path, "rb") as f:
		encr_key = f.read()
		
	print("We've loaded the server's private RSA key, so we can decrypt the encrypted symmetrical key.")
	print("The contents of the file are as follows - do you recognize it?\n")
	print(encr_key)
	print()
	sleep(4)
		
	msg = decode_msg(private, encr_key)	
	print("Now we have decrypted the symmetrical key back to its plaintext self -- this is the outcome:")
	print(msg)
	print()
	sleep(4)
	with open(encrypted_file_path, "rb") as f:
		fer = Fernet(msg)
		dec_msg = fer.decrypt(f.read())
		print("Finally, we can open the encrypted file and decode it. Guess what it says -")
		sleep(2)
		print(dec_msg.decode())
		
def server_encrypt_symmetric_key():
	rsa = load_public_rsa()
	with open("../test_files/encryptedSymmetricKey.key", "r") as f:
		data = f.read()
		print( encode_msg( rsa, data ) )

def encrypt_file(path):
	with open(path, "r") as f:
		data = f.read()
	
	with open(path, "w") as f:
		msg = encode_msg( load_public_rsa(), data )
		print(msg)
		f.write(str(msg))

create_new_keymsg()