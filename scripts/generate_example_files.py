from cryptography.fernet import Fernet
from server_rsa import *
from cryptography.hazmat.primitives.serialization import *

encrypted_file_path = "../test_files/encrypted_file"
encrypted_key_path = "../test_files/encrypted_file_key"

def create_new_keymsg():
	# Generating a new Fernet key
	# Fernet is symmetrical encryption.
	symmetricKey = Fernet.generate_key()
	# Creating a fernet instance with it so we can encrypt and decrypt with it.
	fernet = Fernet(symmetricKey)
	
	# Our secret message is of highly important nature - it's crucial that nobody
	# else knows not to let their memes be dreams.
	enc = fernet.encrypt(b"Don't let your memes be dreams!")
	print("Top secret message that's being encrypted:")
	print("Don't let your memes be dreams!\n")
	print("Is being encrypted with the following key:")
	print(symmetricKey)
	print()
	print("And is now:")
	print(enc)
	print()
	# Loads the server's public key, so we can encrypt the symmetric key with it
	public = load_public_rsa()
	# by making a call to the encode_msg function located in server_rsa.py, we can
	# encrypt the symmetrical key.	
	encr_symm_key = encode_msg( public, symmetricKey )
	
	print("The server's public RSA key is being used to further encode the aforementioned symmetric key!")
	print("It is now :")
	print(encr_symm_key)
	print()

	# enc is the encrypted message.

	# open or create encrypted_file
	# write string of enc to the file
	with open(encrypted_file_path, "wb") as f:
		f.write(enc)
		
	# open or create a file to store the file key
	# write the string of the key to the file.
	with open(encrypted_key_path, "wb") as f:
		f.write(encr_symm_key)
		
def test_keymsg():
	private = load_private_rsa()
	with open(encrypted_key_path, "rb") as f:
		encr_key = f.read()
		
	msg = decode_msg(private, encr_key)	
	with open(encrypted_file_path, "rb") as f:
		fer = Fernet(msg)
		dec_msg = fer.decrypt(f.read())
		print(dec_msg.decode())
		
def server_encrypt_symmetric_key():
	rsa = load_public_rsa()
	with open("../test_files/encryptedSymmetricKey.key", "r") as f:
		data = f.read()
		print( encode_msg( rsa, data ) )

def encrypt_file(path):
	with open(path, "r") as f:
		data = f.read()
	
	with open(path, "w") as f:
		msg = encode_msg( load_public_rsa(), data )
		print(msg)
		f.write(str(msg))

create_new_keymsg()

test_keymsg()