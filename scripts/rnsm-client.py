"""
FILE	: rnsm-client.py
DATE	: 2022-02-02
AUTHOR	: Ryan Enns
PROJECT	: ACS A1
DESC	:
	This is a relatively short application, albeit most of the logic
	that it implements is not within this file. This file is the client
	side of the cryptography client-server app described in the ethical
	hacking ebook we've been reading.
"""

import socket
from cryptography.fernet import Fernet

encrypted_file_path = "../test_files/encrypted_file"
encrypted_key_path = "../test_files/encrypted_file_key"

# NAME:	sendEncryptedKey
# DESC:
#	This function opens a file that (presumably) contains an encrypted
#	string. It sends this string to a server at a local port, and with
#	the response bytes, attempts to decrypt a local file using it as a
#	Fernet symmetrical key.
def sendEncryptedKey(eKeyFilePath, eFilePath):
	with socket.create_connection(("127.0.0.1", 58000)) as sock:
		# send the contents of the key file to the server
		with open(eKeyFilePath, "rb") as file:
			data = file.read()
			sock.send(data)
			
			# receive a response sized 1024 from the server
			response = sock.recv(1024)
		
		# open up file to decrypt
		with open(eFilePath, "rb") as file:
			fer = Fernet(response)
			file_data = fer.decrypt(file.read())
			print(file_data.decode())
	
# calling the above func
sendEncryptedKey(encrypted_key_path, encrypted_file_path)