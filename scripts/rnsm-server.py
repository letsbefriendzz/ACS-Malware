"""
This server's job is to take a message from the client, expecting an encrypted
symmetric key. The symmetric key is encrypted using the server's public key.
When the encrypted key is received, it is decrypted using the asymmetrical
private key that the server has, and then sends it back to the client.

The resource the client is looking to process is encrypted with symmetrical
key encryption. The client has a copy of the key, however the key itself has
been encrypted with asymmetrical encryption - encrypted with the server's
public key, and thus can only be decrypted by the server's private key as a
result.
"""

import server_rsa
import socketserver
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding,rsa
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet
from time import sleep

class ClientHandler(socketserver.BaseRequestHandler):
	def handle(self):
		encrypted_key = self.request.recv(4096).strip()
		# Finally, the sendall method is called
		try:
			print("Attempting to decode received message.")
			# variable data uses the decode msg method, loads the private server RSA instance,
			# and sends the data received.
			data = server_rsa.decode_msg( server_rsa.load_private_rsa(), encrypted_key )
			self.request.sendall(data)
			print("Success!")
		except:
			print("Failed to decode")
		
if __name__ == "__main__":
	HOST,PORT = "127.0.0.1",58000		
		
tcpServer = socketserver.TCPServer((HOST, PORT), ClientHandler)
try:
	print("Serving 5ever")
	tcpServer.serve_forever()
except:
	print("An error occured")